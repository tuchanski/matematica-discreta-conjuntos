/* Guilherme Tuchanski Rocha
 * OBS: Conforme esclarecido com professor, utilizarei Java.
 * Para obter os pontos relativos a este trabalho, voc√™ dever√° criar um programa, utilizando a
 * linguagem Python, C, ou C++. Este programa, quando executado, ir√° apresentar os resultados de
 * opera√ß√µes que ser√£o realizadas entre dois conjuntos de dados.
 * O programa que voc√™ desenvolver√° ir√° receber como entrada um arquivo de texto (.txt)
 * contendo v√°rios conjuntos de dados e v√°rias opera√ß√µes. Estas opera√ß√µes e dados estar√£o representadas
 * em um arquivo de textos contendo apenas os dados referentes as opera√ß√µes que devem ser realizadas
 * segundo a seguinte regra fixa: a primeira linha do arquivo de texto de entrada conter√° o n√∫mero de
 * opera√ß√µes que est√£o descritas no arquivo, este n√∫mero de opera√ß√µes ser√° um inteiro; as linhas
 * seguintes seguir√£o sempre o mesmo padr√£o de tr√™s linhas: a primeira linha apresenta o c√≥digo da
 * opera√ß√£o (U para uni√£o, I para interse√ß√£o, D para diferen√ßa e C produto cartesiano), a segunda e
 * terceira linhas conter√£o os elementos dos conjuntos separados por virgulas. A seguir est√° um exemplo
 * das linhas que podem existir em um arquivo de testes para o programa que voc√™ ir√° desenvolver:
 * 4
 * U
 * 3, 5, 67, 7
 * 1, 2, 3, 4
 * I
 * 1, 2, 3, 4, 5
 * 4, 5
 * D
 * 1, A, C, 34
 * A, C, D, 23
 * C
 * 3, 4, 5, 5, A, B, R
 * 1, B, C, D, 1
 * Neste exemplo temos 4 opera√ß√µes uma uni√£o (U), uma interse√ß√£o (I), um diferen√ßa (D) e um
 * produto cartesiano (C). A uni√£o, definida por U, dever√° ser executada sobre os conjuntos {ùüë, ùüì, ùüîùüï, ùüï} e
 * {ùüè, ùüê, ùüë, ùüí}, cujos elementos est√£o explicitados nas linhas posteriores a defini√ß√£o da oper√ß√£o (U).
 * A resposta do seu programa dever√° conter a opera√ß√£o realizada, descrita por extenso, os dados
 * dos conjuntos identificados, e o resultado da opera√ß√£o. No caso da uni√£o a linha de sa√≠da dever√° conter
 * a informa√ß√£o e a formata√ß√£o mostrada a seguir:
 * Uni√£o: conjunto 1 {3, 5, 67, 7}, conjunto 2 {1, 2, 3, 4}. Resultado: {3, 5, 67, 7, 1, 2, 4}
 * Seu programa dever√° mostrar a sa√≠da no terminal, ou em um arquivo de textos. Em qualquer
 * um dos casos, a sa√≠da ser√° composta por uma linha de sa√≠da para cada opera√ß√£o constante no arquivo
 * de textos de entrada formatada segundo o exemplo de sa√≠da acima. Observe as letras mai√∫sculas e
 * min√∫sculas, e os pontos utilizados na formata√ß√£o da linha de sa√≠da apresenta acima.
 * No caso do texto de exemplo, teremos 4 linhas, e apenas 4 linhas de sa√≠da, formatadas e
 * pontuadas conforme o exemplo de sa√≠da acima. O uso de linhas extras na sa√≠da, ou erros de formata√ß√£o,
 * implicam em perda de pontos como pode ser visto na rubrica de avalia√ß√£o constante neste documento.
 * Para que seu programa possa ser testado voc√™ deve criar, no m√≠nimo, tr√™s arquivos de entrada
 * contendo um n√∫mero diferente de opera√ß√µes, opera√ß√µes com dados diferentes, e opera√ß√µes em ordem
 * P√°gina | 3 de 3
 * Andrey Cabral
 * Exercicios, pesquisas e atividades
 * EXERC√çCIOS AVALIA√á√ÉO INDIVIDUAL
 * diferentes. Os arquivos de entrada criados para os seus testes devem estar dispon√≠veis tanto no
 * ambiente repl.it quanto no ambiente Github.
 * Observe que o professor ir√° testar seu programa com os arquivos de testes que voc√™ criar e com,
 * no m√≠nimo um arquivo de testes criado pelo pr√≥prio professor.
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class Main {
    public static void main(String[] args) {
        try {
            Scanner input = new Scanner(System.in);
          System.out.println("- Seja bem-vindo! Lembre-se de inserir um arquivo no formato v√°lido.");
            System.out.print("- Entre o caminho do .txt para ser lido: ");
            String path = input.next(); // Favor ir at√© a pasta de dados e inserir o caminho do arquivo escolhido. Padr√£o: dados_teste/nome_do_arquivo.txt
            // Exemplo: dados_teste/dados1.txt

            File arquivo = new File(path);
            Scanner scanner = new Scanner(arquivo);

            int numOperacoes = Integer.parseInt(scanner.nextLine().trim()); // L√™ a primeira linha - n√∫mero de opera√ß√µes
            for (int i = 0; i < numOperacoes; i++) {

                System.out.println();
                String operacao = scanner.nextLine().trim(); // Pega o tipo da opera√ß√£o
                Set<String> conjunto1 = lerConjunto(scanner.nextLine().trim()); // Primeiro conjunto
                Set<String> conjunto2 = lerConjunto(scanner.nextLine().trim()); // Segundo conjunto
                Set<String> resultado = new HashSet<>(); // Hashset - interface de Set que n√£o permite duplicatas

                // Verifica opera√ß√£o e a realiza.
                switch (operacao) {
                    case "U": // Para uni√£o
                        resultado.addAll(conjunto1);
                        resultado.addAll(conjunto2);
                        System.out.printf("Uni√£o: conjunto 1 %s, conjunto 2 %s. Resultado: %s%n",
                                conjunto1, conjunto2, resultado);
                        break;
                    case "I": // Para interse√ß√£o
                        resultado.addAll(conjunto1);
                        resultado.retainAll(conjunto2);
                        System.out.printf("Interse√ß√£o: conjunto 1 %s, conjunto 2 %s. Resultado: %s%n",
                                conjunto1, conjunto2, resultado);
                        break;
                    case "D": // Para diferen√ßa
                        resultado.addAll(conjunto1);
                        resultado.removeAll(conjunto2);
                        System.out.printf("Diferen√ßa: conjunto 1 %s, conjunto 2 %s. Resultado: %s%n",
                                conjunto1, conjunto2, resultado);
                        break;
                    case "C": // Para produto cartesiano
                        for (String elemento1 : conjunto1) {
                            for (String elemento2 : conjunto2) {
                                resultado.add("(" + elemento1 + ", " + elemento2 + ")");
                            }
                        }
                        System.out.printf("Cartesiano: conjunto 1 %s, conjunto 2 %s. Resultado: %s%n",
                                conjunto1, conjunto2, resultado);
                        break;
                    default:
                        System.out.println("Opera√ß√£o inv√°lida.");
                }
                System.out.println();
            }
            input.close();
            scanner.close();
        }
        catch (FileNotFoundException e) {
            System.out.println("Arquivo n√£o encontrado.");
        }
    }

    // Fun√ß√£o que l√™ um conjunto
    private static Set<String> lerConjunto(String linha) {
        String[] elementos = linha.split(",");
        Set<String> conjunto = new HashSet<>();
        for (String elemento : elementos) {
            conjunto.add(elemento.trim());
        }
        return conjunto;
    }
}